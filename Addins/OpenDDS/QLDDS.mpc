// This file was generated automatically by qldds_gensrc.py.  If you edit this file
// manually then your changes will be lost the next time gensrc runs.

// This source code file was generated from the following stub:
//      qldds/gensrc/stubs/stub.opendds.mpc.library

//
//   Copyright (C) 2016 Mike Kipnis

//   This file is part of QLDDS, a free-software/open-source library
//   for utilization of QuantLib in the distributed envrionment via DDS.

//   Permission is hereby granted, free of charge, to any person obtaining a copy
//   of this software and associated documentation files (the "Software"), to deal
//   in the Software without restriction, including without limitation the rights
//   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//   copies of the Software, and to permit persons to whom the Software is
//   furnished to do so, subject to the following conditions:

//   The above copyright notice and this permission notice shall be included in all
//   copies or substantial portions of the Software.

//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//   SOFTWARE.


project(garbagecollection) : dcps {

  after		+= qldds_utils
  sharedname     = garbagecollection
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	garbagecollection.idl

  }

  IDL_Files {
        	garbagecollection.idl

        	garbagecollectionTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(logging) : dcps {

  after		+= qldds_utils
  sharedname     = logging
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	logging.idl

  }

  IDL_Files {
        	logging.idl

        	loggingTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(ohutils) : dcps {

  after		+= qldds_utils
  sharedname     = ohutils
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	ohutils.idl

  }

  IDL_Files {
        	ohutils.idl

        	ohutilsTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(serialization) : dcps {

  after		+= qldds_utils
  sharedname     = serialization
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	serialization.idl

  }

  IDL_Files {
        	serialization.idl

        	serializationTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(valueobjects) : dcps {

  after		+= qldds_utils
  sharedname     = valueobjects
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	valueobjects.idl

  }

  IDL_Files {
        	valueobjects.idl

        	valueobjectsTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(bonds) : dcps {

  after		+= qldds_utils
  sharedname     = bonds
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	bonds.idl

  }

  IDL_Files {
        	bonds.idl

        	bondsTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(exercise) : dcps {

  after		+= qldds_utils
  sharedname     = exercise
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	exercise.idl

  }

  IDL_Files {
        	exercise.idl

        	exerciseTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(forwardrateagreement) : dcps {

  after		+= qldds_utils
  sharedname     = forwardrateagreement
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	forwardrateagreement.idl

  }

  IDL_Files {
        	forwardrateagreement.idl

        	forwardrateagreementTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(qlIndex) : dcps {

  after		+= qldds_utils
  sharedname     = qlIndex
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	qlIndex.idl

  }

  IDL_Files {
        	qlIndex.idl

        	qlIndexTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(options) : dcps {

  after		+= qldds_utils
  sharedname     = options
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	options.idl

  }

  IDL_Files {
        	options.idl

        	optionsTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(overnightindexedswap) : dcps {

  after		+= qldds_utils
  sharedname     = overnightindexedswap
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	overnightindexedswap.idl

  }

  IDL_Files {
        	overnightindexedswap.idl

        	overnightindexedswapTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(payoffs) : dcps {

  after		+= qldds_utils
  sharedname     = payoffs
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	payoffs.idl

  }

  IDL_Files {
        	payoffs.idl

        	payoffsTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(piecewiseyieldcurve) : dcps {

  after		+= qldds_utils
  sharedname     = piecewiseyieldcurve
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	piecewiseyieldcurve.idl

  }

  IDL_Files {
        	piecewiseyieldcurve.idl

        	piecewiseyieldcurveTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(pricingengines) : dcps {

  after		+= qldds_utils
  sharedname     = pricingengines
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	pricingengines.idl

  }

  IDL_Files {
        	pricingengines.idl

        	pricingenginesTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(processes) : dcps {

  after		+= qldds_utils
  sharedname     = processes
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	processes.idl

  }

  IDL_Files {
        	processes.idl

        	processesTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(ratehelpers) : dcps {

  after		+= qldds_utils
  sharedname     = ratehelpers
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	ratehelpers.idl

  }

  IDL_Files {
        	ratehelpers.idl

        	ratehelpersTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(schedule) : dcps {

  after		+= qldds_utils
  sharedname     = schedule
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	schedule.idl

  }

  IDL_Files {
        	schedule.idl

        	scheduleTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(qlSwapNS) : dcps {

  after		+= qldds_utils
  sharedname     = qlSwapNS
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	qlSwapNS.idl

  }

  IDL_Files {
        	qlSwapNS.idl

        	qlSwapNSTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(swaption) : dcps {

  after		+= qldds_utils
  sharedname     = swaption
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	swaption.idl

  }

  IDL_Files {
        	swaption.idl

        	swaptionTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(swaptionvolstructure) : dcps {

  after		+= qldds_utils
  sharedname     = swaptionvolstructure
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	swaptionvolstructure.idl

  }

  IDL_Files {
        	swaptionvolstructure.idl

        	swaptionvolstructureTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(vanillaswap) : dcps {

  after		+= qldds_utils
  sharedname     = vanillaswap
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	vanillaswap.idl

  }

  IDL_Files {
        	vanillaswap.idl

        	vanillaswapTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}
project(volatilities) : dcps {

  after		+= qldds_utils
  sharedname     = volatilities
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I../../qldds_utils -Wb,export_macro=QLDDS_Export

  libs		+= qldds_utils
  libout        = $(QLDDS_ROOT)/lib

  TypeSupport_Files {
        	volatilities.idl

  }

  IDL_Files {
        	volatilities.idl

        	volatilitiesTypeSupport.idl

  }

  Header_Files {
  }

  Source_Files {
  }

}


