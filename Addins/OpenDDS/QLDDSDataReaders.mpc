// This file was generated automatically by qldds_gensrc.py.  If you edit this file
// manually then your changes will be lost the next time gensrc runs.

// This source code file was generated from the following stub:
//      git/qldds/gensrc/stubs/stub.opendds.mpc.datareader

//
//   Copyright (C) 2016 Mike Kipnis

//   This file is part of QLDDS, a free-software/open-source library
//   for utilization of QuantLib in the distributed envrionment via DDS.

//   Permission is hereby granted, free of charge, to any person obtaining a copy
//   of this software and associated documentation files (the "Software"), to deal
//   in the Software without restriction, including without limitation the rights
//   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//   copies of the Software, and to permit persons to whom the Software is
//   furnished to do so, subject to the following conditions:

//   The above copyright notice and this permission notice shall be included in all
//   copies or substantial portions of the Software.

//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//   SOFTWARE.


project(garbagecollectionDefaultDataReader) : dcps, install {

  after    += qldds_utils garbagecollection

  sharedname     = garbagecollectionDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils garbagecollection boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	garbagecollectionDataReaderListenerImpl.hpp

  }

  Source_Files {
         	garbagecollectionDataReaderListenerImpl.cpp

  }

}

project(loggingDefaultDataReader) : dcps, install {

  after    += qldds_utils logging

  sharedname     = loggingDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils logging boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	loggingDataReaderListenerImpl.hpp

  }

  Source_Files {
         	loggingDataReaderListenerImpl.cpp

  }

}

project(ohutilsDefaultDataReader) : dcps, install {

  after    += qldds_utils ohutils

  sharedname     = ohutilsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils ohutils boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	ohutilsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	ohutilsDataReaderListenerImpl.cpp

  }

}

project(serializationDefaultDataReader) : dcps, install {

  after    += qldds_utils serialization

  sharedname     = serializationDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils serialization boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	serializationDataReaderListenerImpl.hpp

  }

  Source_Files {
         	serializationDataReaderListenerImpl.cpp

  }

}

project(valueobjectsDefaultDataReader) : dcps, install {

  after    += qldds_utils valueobjects

  sharedname     = valueobjectsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils valueobjects boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	valueobjectsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	valueobjectsDataReaderListenerImpl.cpp

  }

}

project(bondsDefaultDataReader) : dcps, install {

  after    += qldds_utils bonds

  sharedname     = bondsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils bonds boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	bondsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	bondsDataReaderListenerImpl.cpp

  }

}

project(exerciseDefaultDataReader) : dcps, install {

  after    += qldds_utils exercise

  sharedname     = exerciseDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils exercise boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	exerciseDataReaderListenerImpl.hpp

  }

  Source_Files {
         	exerciseDataReaderListenerImpl.cpp

  }

}

project(forwardrateagreementDefaultDataReader) : dcps, install {

  after    += qldds_utils forwardrateagreement

  sharedname     = forwardrateagreementDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils forwardrateagreement boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	forwardrateagreementDataReaderListenerImpl.hpp

  }

  Source_Files {
         	forwardrateagreementDataReaderListenerImpl.cpp

  }

}

project(qlIndexDefaultDataReader) : dcps, install {

  after    += qldds_utils qlIndex

  sharedname     = qlIndexDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils qlIndex boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	qlIndexDataReaderListenerImpl.hpp

  }

  Source_Files {
         	qlIndexDataReaderListenerImpl.cpp

  }

}

project(optionsDefaultDataReader) : dcps, install {

  after    += qldds_utils options

  sharedname     = optionsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils options boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	optionsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	optionsDataReaderListenerImpl.cpp

  }

}

project(overnightindexedswapDefaultDataReader) : dcps, install {

  after    += qldds_utils overnightindexedswap

  sharedname     = overnightindexedswapDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils overnightindexedswap boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	overnightindexedswapDataReaderListenerImpl.hpp

  }

  Source_Files {
         	overnightindexedswapDataReaderListenerImpl.cpp

  }

}

project(payoffsDefaultDataReader) : dcps, install {

  after    += qldds_utils payoffs

  sharedname     = payoffsDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils payoffs boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	payoffsDataReaderListenerImpl.hpp

  }

  Source_Files {
         	payoffsDataReaderListenerImpl.cpp

  }

}

project(piecewiseyieldcurveDefaultDataReader) : dcps, install {

  after    += qldds_utils piecewiseyieldcurve

  sharedname     = piecewiseyieldcurveDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils piecewiseyieldcurve boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	piecewiseyieldcurveDataReaderListenerImpl.hpp

  }

  Source_Files {
         	piecewiseyieldcurveDataReaderListenerImpl.cpp

  }

}

project(pricingenginesDefaultDataReader) : dcps, install {

  after    += qldds_utils pricingengines

  sharedname     = pricingenginesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils pricingengines boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	pricingenginesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	pricingenginesDataReaderListenerImpl.cpp

  }

}

project(processesDefaultDataReader) : dcps, install {

  after    += qldds_utils processes

  sharedname     = processesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils processes boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	processesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	processesDataReaderListenerImpl.cpp

  }

}

project(ratehelpersDefaultDataReader) : dcps, install {

  after    += qldds_utils ratehelpers

  sharedname     = ratehelpersDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils ratehelpers boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	ratehelpersDataReaderListenerImpl.hpp

  }

  Source_Files {
         	ratehelpersDataReaderListenerImpl.cpp

  }

}

project(scheduleDefaultDataReader) : dcps, install {

  after    += qldds_utils schedule

  sharedname     = scheduleDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils schedule boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	scheduleDataReaderListenerImpl.hpp

  }

  Source_Files {
         	scheduleDataReaderListenerImpl.cpp

  }

}

project(qlSwapNSDefaultDataReader) : dcps, install {

  after    += qldds_utils qlSwapNS

  sharedname     = qlSwapNSDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils qlSwapNS boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	qlSwapNSDataReaderListenerImpl.hpp

  }

  Source_Files {
         	qlSwapNSDataReaderListenerImpl.cpp

  }

}

project(swaptionDefaultDataReader) : dcps, install {

  after    += qldds_utils swaption

  sharedname     = swaptionDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils swaption boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	swaptionDataReaderListenerImpl.hpp

  }

  Source_Files {
         	swaptionDataReaderListenerImpl.cpp

  }

}

project(swaptionvolstructureDefaultDataReader) : dcps, install {

  after    += qldds_utils swaptionvolstructure

  sharedname     = swaptionvolstructureDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils swaptionvolstructure boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	swaptionvolstructureDataReaderListenerImpl.hpp

  }

  Source_Files {
         	swaptionvolstructureDataReaderListenerImpl.cpp

  }

}

project(vanillaswapDefaultDataReader) : dcps, install {

  after    += qldds_utils vanillaswap

  sharedname     = vanillaswapDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils vanillaswap boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	vanillaswapDataReaderListenerImpl.hpp

  }

  Source_Files {
         	vanillaswapDataReaderListenerImpl.cpp

  }

}

project(volatilitiesDefaultDataReader) : dcps, install {

  after    += qldds_utils volatilities

  sharedname     = volatilitiesDefaultDataReader
  dynamicflags   = QLDDS_BUILD_DLL
  requires += tao_orbsvcs
  includes      += $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/include \
                $(QUANTLIB_ROOT)/include $(OH_ROOT)/include $(QUANTLIB_ADDIN_ROOT)/include
  idlflags      += -I$(TAO_ROOT)/orbsvcs -I$(QLDDS_ROOT)/qldds_utils  \
                   -Wb,export_macro=QLDDS_Export \
                   -Wb,export_include=../../qldds_utils/qldds_Export.h
  dcps_ts_flags += -I$(QLDDS_ROOT)/qldds_utils -Wb,export_macro=QLDDS_Export
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(BOOST_ROOT)/lib $(QUANTLIB_ROOT)/lib \
                   $(OH_ROOT)/lib $(QUANTLIB_ADDIN_ROOT)/lib
   libout        = $(QLDDS_ROOT)/lib

  libs  += ObjectHandler QuantLib QuantLibAddin QuantLibAddinCpp qldds_utils volatilities boost_date_time

  TypeSupport_Files {
  }

  IDL_Files {
  }

  Header_Files {
         	volatilitiesDataReaderListenerImpl.hpp

  }

  Source_Files {
         	volatilitiesDataReaderListenerImpl.cpp

  }

}


