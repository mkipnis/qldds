//
//   Copyright (C) 2016 Mike Kipnis

//   This file is part of QLDDS, a free-software/open-source library
//   for utilization of QuantLib in the distributed envrionment via DDS.

//   Permission is hereby granted, free of charge, to any person obtaining a copy
//   of this software and associated documentation files (the "Software"), to deal
//   in the Software without restriction, including without limitation the rights
//   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//   copies of the Software, and to permit persons to whom the Software is
//   furnished to do so, subject to the following conditions:

//   The above copyright notice and this permission notice shall be included in all
//   copies or substantial portions of the Software.

//   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//   SOFTWARE.


project( *EquityOptions ) : dcps {

  sharedname	= EquityOptions
  dynamicflags  = EQUITYOPTIONS_BUILD_DLL
  libout	= .
  requires	+= tao_orbsvcs
  after		+= Svc_Utils
  includes      += $(TAO_ROOT)/orbsvcs \
                   $(QLDDS_ROOT)/qldds_utils \
                   $(QLDDS_ROOT)/Addins/OpenDDS 

  idlflags      += -I$(TAO_ROOT)/orbsvcs \
                   -I$(QLDDS_ROOT)/qldds_utils \
                   -I$(QLDDS_ROOT)/Addins/OpenDDS \
                   -Wb,export_macro=EquityOptions_Export \
                   -Wb,export_include=EquityOptions_Export.h

  dcps_ts_flags += -Wb,export_macro=EquityOptions_Export \
                   -I$(QLDDS_ROOT)/qldds_utils \
                   -I$(QLDDS_ROOT)/Addins/OpenDDS
 
  libpaths      += $(QLDDS_ROOT)/qldds_utils $(QLDDS_ROOT)/Addins/OpenDDS

  libs          += pricingengines exercise volatilities payoffs processes

  TypeSupport_Files {
    EquityOptions.idl
  }

  IDL_Files {
    EquityOptions.idl
    EquityOptionsTypeSupport.idl
  }

  // We only want the generated files
  Header_Files {
  }

  // We only want the generated files
  Source_Files {
  }
}

project( *Straddles ) : dcps {

  sharedname    = Straddles 
  dynamicflags  = STRADDLES_BUILD_DLL
  libout        = .
  requires      += tao_orbsvcs
  after         += Svc_Utils
  includes      += $(TAO_ROOT)/orbsvcs
  idlflags      += -I$(TAO_ROOT)/orbsvcs \
                   -Wb,export_macro=Straddles_Export \
                   -Wb,export_include=Straddles_Export.h
  dcps_ts_flags += -Wb,export_macro=Straddles_Export


  TypeSupport_Files {
    Straddles.idl
  }

  IDL_Files {
    Straddles.idl
    StraddlesTypeSupport.idl
  }

  // We only want the generated files
  Header_Files {
  }

  // We only want the generated files
  Source_Files {
  }
}


project( *DataPublisher ) : dcpsexe, svc_utils {
	exename 	= 	DataPublisher	
        after           =       *EquityOptions

        includes       +=       $(QLDDS_ROOT)/qldds_utils $(QLDDS_ROOT)/Addins/OpenDDS
        libpaths       +=       $(QLDDS_ROOT)/qldds_utils $(QLDDS_ROOT)/Addins/OpenDDS
        dcps_ts_flags  +=       -I$(QLDDS_ROOT)/qldds_utils -I$(QLDDS_ROOT)/Addins/OpenDDS
        idlflags       +=       -I$(QLDDS_ROOT)/qldds_utils -I$(QLDDS_ROOT)/Addins/OpenDDS 

        libs           +=       qldds_utils pricingengines exercise volatilities payoffs processes EquityOptions

	TypeSupport_Files {
        }

        IDL_Files {
        }

	Source_Files {
		EquityOptionsDataPublisher.cpp
	}
}

project( *Server ) : dcpsexe, svc_utils {
        exename         =       EquityOptionsServer
        after           =       *EquityOptions *Straddles 		     
        requires        +=      tao_orbsvcs
        includes        +=      $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils $(QLDDS_ROOT)/Addins/OpenDDS $(QL_ROOT)/include $(QL_ROOT)/include/qlo  
        idlflags        +=      -I$(QLDDS_ROOT)/qldds_utils -I$(QLDDS_ROOT)/Addins/OpenDDS
        dcps_ts_flags   +=      -I$(QLDDS_ROOT)/qldds_utils -I$(QLDDS_ROOT)/Addins/OpenDDS
        libpaths        +=      $(QL_ROOT)/lib $(QLDDS_ROOT)/qldds_utils $(QLDDS_ROOT)/Addins/OpenDDS

        libs            +=      qldds_utils pricingengines exercise volatilities payoffs processes EquityOptions Straddles 
 	pure_libs       =     $(QL_ROOT)/lib/libQuantLibAddinCpp.a \
  	                    $(QL_ROOT)/lib/libQuantLibAddin.a \
                        $(QL_ROOT)/lib/libObjectHandler.a \
                        $(QL_ROOT)/lib/libQuantLib.a \
                        $(QL_ROOT)/lib/libboost_system.a  \
                        $(QL_ROOT)/lib/libboost_serialization.a \
                        $(QL_ROOT)/lib/libboost_filesystem.a

        idlflags        +=      -I$(QLDDS_ROOT)/qldds_utils -I$(QLDDS_ROOT)/Addins/OpenDDS

        Source_Files {
                EquityOptionsServer.cpp
        }

        TypeSupport_Files {
        }
       
        IDL_Files {
        }
}

project( *Client ) : dcpsexe, svc_utils {
        exename         =       EquityOptionsClient
        after		=	*Straddles
        requires        +=      tao_orbsvcs
        includes        +=      $(TAO_ROOT)/orbsvcs $(QLDDS_ROOT)/qldds_utils
        idlflags        +=      -I$(QLDDS_ROOT)/qldds_utils 
        dcps_ts_flags   +=      -I$(QLDDS_ROOT)/qldds_utils
        libpaths        +=      $(QLDDS_ROOT)/qldds_utils

        libs  		+=       qldds_utils Straddles

        idlflags        +=      -I$(QLDDS_ROOT)/qldds_utils

        Source_Files {
                EquityOptionsClient.cpp
        }

        TypeSupport_Files {
        }

        IDL_Files {
        }

}
